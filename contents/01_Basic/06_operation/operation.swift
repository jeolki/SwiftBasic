/* 연산자 */

import UIKit

/*
    - 스위프트의 연산자는 특정한 문자로 표현한 함수라 할 수 있습니다.
    - 연산자에 의해 연산 되는 값의 수에 따라 단항, 이항, 삼항 으로 구분합니다.
    - 연산자의 위치에 따라 전위, 중위, 후위 등으로 구분합니다.
*/


//MARK: 연산자의 종류

/*
    * 할당 연산자
    - 값을 할당할 때 사용
    - A = B
 
    * 산술 연산자
    - 수학에서 쓰이는 연산자 역할
    - A + B
    - A - B
    - A * B
    - A / B : A를 B로 나눈 값
    - A % B : A를 B로 나눈 나머지
    - 서로 다른 자료형 끼리의 연산을 업격히 제한

    * 비교 연산자
    - 두 값을 비교할 때 사용
    - A == B
    - A >= B
    - A <= B
    - A > B
    - A < B
    - A != B
    - A === B   : A와 B가 참조 타입일 때 A와 B가 같은 인스턴스를 가리키는지 비교
    - A !== B
    - A ~= B    : A와 B의 패턴이 매치되는지
 
    * 삼항 조건 연산자
    - 피연산자가 세개인 삼항 조건
    - Question ? A : B
 
    * 범위 연산자
    - 값(수)의 범위를 나타내고자 할 때 사용
    - A...B     : A부터 B까지의 수를 묶어 범위를 표현, A와 B를 포함
    - A.. < B   : A부터 B미만까지의 수를 묶어 범위를 표현, A를 포함하고 B를 포함하지 않는다
    - A...      : A이상의 수를 묶어 포현, A포함
    - ...A      : A이하의 수를 묶어 표현, A포함
    - .. < A    : A미만의 수를 묶어 범위를 표현, A 미포함

    * 부울 연산자
    - 불리언 값의 논리 연산을 할 때 사용
    - !B
    - A && B
    - A || B
 
    * 비트 연산자
    - 값의 비트 논리 연산을 위한 연산자
    - ~A
    - A & B
    - A | B
    - A ^ B
    - A >> B, A << B
 
    * 복합 할당 연산자
    - 할당 연산자와 다른 연산자가 하는 일을 한 번에 할 수 있도록 연산자를 결합할 수 있습니다.
    - A += B
    - A -= B
    - A *= B
    - A /= B
    - A %= B
    - A <<= N
    - A >>= N
    - A &= B
    - A |= B
    - A ^= B

    * 오버플로 연산자
    - 오버플로 연산자를 사용하면 오버플로를 자동으로 처리
    - &+ : 오버플로에 대비한 덧셈 연산
    - &- : 오버플로에 대비한 뺄셈 연산
    - &* : 오버플로에 대비한 곱셈 연산

    * 기타 연산자
    - 스위프트 라이브러리에 기본적으로 정의된 연산자
    - A ?? B    : A가 nil이 아니면 A를 반환하고, A가 nil이면 B를 반환
    - -A        : A(수)의 부호를 변경
    - O!        : O(옵셔널 개체)의 값을 강제로 추출합니다
    - V?        : V(옵셔널 값)를 안전하게 추출하거나, V(데이터 타입)가 옵셔널임을 표현합니다.
*/
