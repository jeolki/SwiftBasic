/* 데이터 타입 고급 */

import UIKit

//MARK: 데이터 타입 안심
/*
    애플이 처음 스위프트를 발표할 때 강조했던 스위프트의 특징 중 안전성(safe)이 가장 뚜렷하게 나타나는
    부분입니다. 스위프트는 타입에 굉장히 민감하고 엄격합니다. 서로 다른 타입끼리의 데이터 교환은 꼭
    타입캐스팅을 거쳐야 합니다.

    * 데이터 타입 안심이란?
    - 스위프트는 데이터 타입을 안심하고 사용할 수 있는언어입니다.
    - Int 타입 변수에 할당하는 값이 Character 타입이라면 컴파일 오류가 발생합니다
    - 스위프트가 컴파일 시 타입을 확인하는 것을 타입확인이라고 합니다.

    * 타입 추론
    - 스위프트에서는 변수나 상수를 선언할 때 특정 타입을 명시하지 않아도 컴파일러가 할당된 값을
      기준으로 변수나 상수의 타입을 결정합니다.
*/

// 타입을 지정하지 않았으나 타입 추론을 통하여 name은 String 타입으로 선언합니다.
var name = "Willer"

// 앞서 타입 추론에 의해 name은 String 타입의 변수로 지정되었기 때문에
// 정수를 할당하려고 시도하면 오류가 발생합니다.
//name = 100


//MARK: 타입 별칭
/*
    - 스위프트 기본제공 타입과, 사용자 임의의 데이터 타입, 이미 존재하는 데이터 타입에 임의로
      다른 이름(별칭)을 부여할 수 있습니다.
    - 기본 타입 이름과 이후에 추가한 별칭을 모두 사용할 수 있습니다.
*/

typealias MyInt = Int
typealias YourInt = Int
typealias MyDouble = Double

let age: MyInt = 100
var year: YourInt = 2090

// MyInt도, YourInt도 Int이기 때문에 같은 타입으로 취급합니다.
year = age


//MARK: 튜플
/*
    - 튜플(Tuple)은 타입의 이름이 따로 지정되어 있지 않은, 프로그래머 마음대로 만드는 타입입니다.
    - '지정된 데이터의 묶음'이라고 표현할 수 있습니다.
    - 파이썬의 튜플과 유사합니다.
    - 튜플에 포함될 데이터의 개수는 자유롭게 정할 수 있습니다.
*/

// String, Int Double 타입을 갖는 튜플
var person: (String, Int, Double) = ("Willer", 10, 99.9)

// 인덱스를 통해서 값을 빼 올 수 있습니다.
print("이름: \(person.0), 나이: \(person.1), 신장: \(person.2)")

// 인덱스를 통해 값을 할당할 수 있습니다.
person.1 = 99

print("이름: \(person.0), 나이: \(person.1), 신장: \(person.2)")

/*
    튜플의 각 요소를 이름 대신 숫자로 표현하기 때문에 간편해 보일 수 있지만,
    차후에 다른 프로그래머가 코드를 볼 때 각 요소가 어떤 의미가 있는지 유추하기가 어렵습니다.
    이름 없이 인덱스만으로 각 요소의 데이터가 무엇을 나타내는지 쉽게 파악하기가 어렵기 때문입니다
*/

// String, Int Double 타입을 갖는 튜플
var person2: (name: String, age: Int, height: Double) = ("Willer", 10, 99.9)

// 요소이름을 통해서 값을 빼 올 수 있습니다.
print("이름: \(person2.name), 나이: \(person2.age), 신장: \(person2.height)")

/*
    튜플에는 타입 이름에 해당하는 키워드가 따로 없다 보니 사용에 불편함을 겪기도 합니다.
    매번 같은 모양의 튜플을 사용하고 싶은데 선언해줄 때마다 긴 튜플 타입을 모두 써줘야
    하는 불편함이 생길 수 있습니다.
*/
